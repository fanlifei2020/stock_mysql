"""目前回测两个跌停后的竞价入
1.再跌之后的补仓
2.上涨跌回的平仓，下跌涨回的平仓
3.时间窗口
4.竞价入当天涨停，如果第二天跌回买入价，平仓；不设10点止盈价，-3出，如果再涨停，则继续持有
"""
#%matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import tushare as ts
from time import sleep
from sqlalchemy import create_engine
import sqlalchemy
import pymysql
import os
import datetime

#得到当天日期
today=datetime.date.today()
formatted_today=today.strftime('%y%m%d')
today = '20' + formatted_today

pro = ts.pro_api('7d1f3465439683e262b5b06a8aaefa886ea48aafe2cda73c130beb97')
#df = pro.trade_cal(exchange='', start_date='20180101', end_date='20181231')
#data = pro.stock_basic(exchange='', list_status='L', fields='ts_code,symbol,name,area,industry,list_date')
#df = pro.daily(ts_code='000001.SZ,600000.SH', start_date='20180701', end_date='20180718')
#df = pro.daily(trade_date='20180810')


def get_huitiao_shanggong(ts_code,trade_date):
    """
        大阴小阴之前已经有上攻，退出
    """
    unique_df = work_df.loc[(work_df['ts_code']==ts_code)&(work_df['trade_date']>trade_date),:].head(30)
    unique_df.reset_index(drop=True,inplace=True)
    
    flag = 0
    buy_price = 0
    sell_price = 0
    print("\n")
    print("*********************")
    print(ts_code,end=",")
    print(" zt date:",trade_date)
    print("set low:",unique_df.iloc[0,:]['low'])
    low = df.iloc[0,:]['low']
    for index,row in unique_df.iterrows():
        print("index:",index)
        print(row['trade_date'],end="----")
        if flag==0:
            print("flag = 0",end=",")
             
                
            if index!=0 and row['high']>low*1.1:
                print("row high:",row['high'])
                print("大阴之前，已经上攻10个点以上，退出")
                return np.nan
            #low的更新要在判断上攻的后面，确保上攻的最高点和昨天的low相比较，而不是和今天的low相比较，否则大跌也会变成上攻
            if row['low']<low:
                print("更新low,",row['low'])
                low = row['low']
            if row['close']<(row['open']-row['pre_close']*0.07):
                print("得到大阴")
                first_close = row['close']
                first_amount = row['amount']
                flag = 1
                continue
        if flag==1:
            if row['low']<low:
                low = row['low']
            if row['high']>low*1.1:
                print("大阴之后，小阴尚未出现，就上攻，返回nan")
                return np.nan
            if row['close']<row['open'] and (row['close']>(row['open'] - row['pre_close']*0.05)) \
            and (row['close']<=first_close) and (row['amount']<first_amount):
                print("得到小阴")
                flag = 2
            continue
        if  flag==2:
            buy_price = row['open']
            print('竞价买入')
            flag = 3
            continue
        if flag==3:
            if row['open']>buy_price*1.1:
                print("止盈")
                sell_price = row['open']
                break
            if row['high']>buy_price*1.1:
                print("止盈2")
                sell_price = buy_price*1.1
                break
            if row['open']<buy_price*0.8:
                print("止损")
                sell_price = row['open']
                break
            if row['low'] <buy_price*0.8:
                print("止损2")
                sell_price = buy_price*0.8
                break
    
    if buy_price==0:
        return np.nan
    if sell_price == 0:
        sell_price = unique_df.iloc[-1,:]['close']
    rate = (sell_price - buy_price)/buy_price*100
    return round(rate,2)
    

def get_huitiao(ts_code,trade_date):
    """
        没有时间窗口，30天内，7，5，+=10
    """
    unique_df = work_df.loc[(work_df['ts_code']==ts_code)&(work_df['trade_date']>trade_date),:].head(30)
    unique_df.reset_index(drop=True,inplace=True)
    
    flag = 0
    buy_price = 0
    sell_price = 0
    print("\n")
    print("*********************")
    print(ts_code,end=",")
    print(" zt date:",trade_date)
    print("set low:",unique_df.iloc[0,:]['low'])
    low = df.iloc[0,:]['low']
    for index,row in unique_df.iterrows():
        print("index:",index)
        print(row['trade_date'],end="----")
        if flag==0:
            print("flag = 0",end=",")
             
                
            
            if row['close']<(row['open']-row['pre_close']*0.07):
                print("得到大阴")
                first_close = row['close']
                first_amount = row['amount']
                flag = 1
                continue
        if flag==1:

            if row['close']<row['open'] and (row['close']>(row['open'] - row['pre_close']*0.05)) \
            and (row['close']<=first_close) and (row['amount']<first_amount):
                print("得到小阴")
                flag = 2
            continue
        if  flag==2:
            buy_price = row['open']
            print('竞价买入')
            flag = 3
            continue
        if flag==3:
            if row['open']>buy_price*1.1:
                print("止盈")
                sell_price = row['open']
                break
            if row['high']>buy_price*1.1:
                print("止盈2")
                sell_price = buy_price*1.1
                break
            if row['open']<buy_price*0.9:
                print("止损")
                sell_price = row['open']
                break
            if row['low'] <buy_price*0.9:
                print("止损2")
                sell_price = buy_price*0.9
                break
    
    if buy_price==0:
        return np.nan
    if sell_price == 0:
        sell_price = unique_df.iloc[-1,:]['close']
    rate = (sell_price - buy_price)/buy_price*100
    return round(rate,2)

engine = create_engine('mysql+pymysql://root:901113@localhost:3306/stock')
sql = """
    select * from unique_stock;
"""
df = pd.read_sql(sql, engine)

temp= pd.DataFrame(columns=['ts_code','trade_date','open','high','low','close','pre_close','change','pct_chg','vol'\
                                ,'amount','limit_amount','open_profit'])
#取保留最高板
temp.append(df.iloc[0,:])
last_row = df.iloc[0,:]
for index,row in df.iterrows():
    if row['ts_code'] != last_row['ts_code']:
        temp = temp.append(last_row)
    last_row = row
end = len(temp)
temp.reset_index(drop=True,inplace=True)
work_df = pd.DataFrame(columns=['ts_code','trade_date','open','high','low','close','pre_close','change','pct_chg','vol','amount'])
stop = 0 
for index,row in temp.iterrows():
    if row['trade_date']>"20210101":
        break
    if stop%50 == 0:
        print("50 arived")
        if len(work_df)!=0:
            print("del work_df")
            del work_df
        if index+80<end:
            work_sql = "select * from daily where trade_date>=" + row['trade_date'] + \
                " and trade_date<" + temp.iloc[index+80,:]['trade_date']+";"
            work_df = pd.read_sql(work_sql,engine)
            print("work_df created： index from,",row['trade_date'],end=",")
            print("index+80:",temp.iloc[index+80,:]['trade_date'])
     
        else:
            work_sql = "select * from daily where trade_date>=" + row['trade_date'] + \
                " and trade_date<=" + temp.iloc[end-1,:]['trade_date']+";"
            work_df = pd.read_sql(work_sql,engine)
            print("work_df created： index from,",row['trade_date'],end=",")
            print("index+80:",temp.iloc[end-1,:]['trade_date'])
     
    result = get_huitiao(row['ts_code'],row['trade_date'])
    print("result",result)
    temp.loc[index,"huitiao"] = result
    print("temp huitiao added:", temp.loc[index,"huitiao"] )
    stop += 1        
